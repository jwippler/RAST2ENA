#!/usr/bin/perl -w
use strict;

# This script transforms embl files generated by RAST to embl files accepted for submission at ENA
# Tested with contig names of the format "NODE_1110654+_length_161_cov_1002.77"
# example command line: 
# $ ./ConvertRAST2ENA.pl Delta3_OalgB2SA_cleaned_426688.10.embl Delta3_OalgB2SA_cleaned_426688.10_forENA.embl PRJEB28157 "Olavius algarvensis associated proteobacterium Delta 3" OALGB2SADELTA3



my $usage = "scriptname.pl EMBL outfile ENAprojectID organism locus_tag host isolate\nWARNING: /organism qualifier may not be >2 lines long!\n";
my $EMBL = shift or die $usage;
my $out = shift or die $usage;
my $ENAprojectID = shift or die $usage;
my $organism = shift or die $usage;
my $locus_tag = shift or die $usage;
my $host = shift or die $usage;     #name of the host organism
my $isolate = shift or die $usage;  #individual isolate from which the sequence was obtained

my $contig;
#uncomment if RAST peg numbers should be retained in locus tags:
#my $peg;
#uncomment if RAST rna numbers should be retained in locus tags:
#my $rna;
my $tag_count=1;
my $organism_2_lines=0;

open (FILE, $EMBL);
open (OUT, '>', $out) or die "Could not create file '$out' $!";

while (my $line =<FILE>){
    #remove trailing newline characters
    chomp $line;
    #match the ID line and get contig identifier
    if (($line =~ /^ID\s{3}([\w+\.]+);.*/)) {
        #assign contig identifier value to $contig
        $contig = $1;
        #DEBUG: print OUT "Matched the ID line, contig ID is $contig\n";
        #Print first line of embl file:
        #  ID   XXX; XXX; linear; XXX; XXX; XXX; XXX.
        print OUT "ID   XXX; XXX; linear; XXX; XXX; XXX; XXX.\n";
        #print next couple of lines of embl file, e.g.:
        #  XX
        #  AC   ;
        #  XX
        #  AC * _NODE_194074+_length_2134_cov_19.8639
        #  PR   Project:PRJEB20554;
        #  XX
        #  DE   XXX
        #  XX
        print OUT "XX\nAC   \;\nXX\nAC \* _". $contig . "\n" . "XX\nPR   Project:$ENAprojectID;\nXX\nDE   XXX\nXX\n";
    }
    #print feature table header
    if ($line =~ /^FT   Key             Location\/Qualifiers/) {
       print OUT "$line\nFH\n";
    }
    if ($line =~ /^FT.*/) {
    #remove unwanted lines
    #print "Matched FT line\n";
        if ($line =~ /.*\/genome_md5=.*/) {
            next;
        }
        elsif ($line =~ /.*\/project=.*/) {
            next;
        }
        elsif ($line =~ /.*\/genome_id=.*/) {
            next;
        }
        elsif ($line =~ /.*\/transl_table=.*/) {
            next;
        }
    #add organism info
        elsif ($line =~ /.*\/organism=.*/) {
            print OUT "FT                   /organism=\"$organism\"\nFT                   /host=\"$host\"\nFT                   /isolate=\"$isolate\"\n";
            #print "Matched /organism\n";
            if ($line =~ /.*[^"]$/) {
            $organism_2_lines = 1;
            }
        }
        elsif ($organism_2_lines == 1) {
            $organism_2_lines = 0;
            next;
        }
    #add locus tag PEG, while retaining peg number
        elsif ($line =~ /.*\/db_xref="SEED.*\.peg\.(\d+)"/) {
            #uncomment if RAST peg numbers should be retained in locus_tags:
            #$peg = $1;
            #print OUT "FT                   \/locus_tag=\"${locus_tag}_${peg}\"\nFT                   /transl_table=11\n";
            print OUT "FT                   \/locus_tag=\"${locus_tag}_${tag_count}\"\nFT                   /transl_table=11\n";
            $tag_count++;
        }
    #add locus tag RNA, while retaining rna number (RAST rna covers rRNA and tRNA)
        elsif ($line =~ /.*\/db_xref="SEED.*\.rna\.(\d+)"/) {
            #uncomment if RAST rna numbers should be retained in locus tags:
            #$rna = $1;
            #print OUT "FT                   \/locus_tag=\"${locus_tag}_000${rna}\"\n";
            print OUT "FT                   \/locus_tag=\"${locus_tag}_${tag_count}\"\n";
            $tag_count++;
        }
    #command line to check feature keys in the RAST embl file:  
    #$ cat *.embl |grep "^FT"|sed 's/   /:/g'|awk -F ":" '{print $1"\t"$2}'|sort -u
    # FT
    # FT      CDS
    # FT      RNA
    # FT      source
    # FT      tRNA
    #print out any other lines of the FT block:
        else {
            print OUT "$line\n";
        }
    }
    #print the sequence block lines:
    if (($line =~ /^SQ.*/) || ($line =~ /^\s{5}.*/) || ($line =~ /^\/\/$/)) {
        print OUT "$line\n";
    }
}


close (OUT);
close (FILE);

